name: Trigger Pipeline on Folder Change

on:
  push:
    branches:
      - main

jobs:
  check-folder-changes:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - uses: Stockopedia/action-get-changed-files@v1
      id: get_changed
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        ignore: "**/.github" # glob
        foldersOnly: true # to only include folders in the output # either json, csv or newlines
    - name: Echo
      run: echo ${{ steps.get_changed.outputs.changed }}
    - name: Condition
      if: ${{ contains(steps.get_changed.outputs.changed, 'f2') }} #? hello
      run: echo F2 FOLDER
    - name: Condition
      if: ${{ contains(steps.get_changed.outputs.changed, 'f3') }}
      run: echo F3 FOLDERS
    - name: Condition
      if: ${{ contains(steps.get_changed.outputs.changed, 'f1') }}
      run: echo F1 FOLDERS
    - name: Condition
      if: ${{ contains(steps.get_changed.outputs.changed, 'f2')  && contains(steps.get_changed.outputs.changed, 'f3') }}
      run: echo F21fS3
    - name: Update Semantic Version
      run: |
        commit_message="${{ github.event.head_commit.message }}"
        
        if [[ $commit_message == *"PATCH"* ]]; then
            version=$(curl -s "https://pypi.org/pypi/sigmoidpythonpackage/json" | jq -r '.info.version')
            major_version=$(echo "$version" | cut -d. -f1)
            minor_version=$(echo "$version" | cut -d. -f2)
            patch_version=$(echo "$version" | cut -d. -f3)
            ((patch_version++))
            new_version="${major_version}.${minor_version}.${patch_version}"            
            echo "Updated version: $new_version"
        elif [[ $commit_message == *"MINOR"* ]]; then
            version=$(curl -s "https://pypi.org/pypi/sigmoidpythonpackage/json" | jq -r '.info.version')
            major_version=$(echo "$version" | cut -d. -f1)
            minor_version=$(echo "$version" | cut -d. -f2)
            ((minor_version++))
            new_version="${major_version}.${minor_version}.0"              
            echo "Updated version: $new_version"
        elif [[ $commit_message == *"MAJOR"* ]]; then
            version=$(curl -s "https://pypi.org/pypi/sigmoidpythonpackage/json" | jq -r '.info.version')
            major_version=$(echo "$version" | cut -d. -f1)
            a=$(expr $major_version + 1)
            new_version="${a}.0.0"              
            echo "Updated version: $new_version"
        fi



